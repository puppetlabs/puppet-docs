---
canonical: "/references/latest/function.html"
layout: default
title: Function Reference
---


Function Reference
=====


<p><strong>This page is autogenerated; any changes will get overwritten</strong> <em>(last generated on Thu Feb 24 17:22:44 -0800 2011)</em></p>

<p>There are two types of functions in Puppet: Statements and rvalues.
Statements stand on their own and do not return arguments; they are used for
performing stand-alone work like importing.  Rvalues return values and can
only be used in a statement requiring a value, such as an assignment or a case
statement.</p>
<p>Here are the functions available in Puppet:</p>

----------------

### alert

<p>Log a message on the server at level
alert.</p>
<ul>
<li><strong>Type</strong>: statement</li>
</ul>


----------------

### crit

<p>Log a message on the server at level
crit.</p>
<ul>
<li><strong>Type</strong>: statement</li>
</ul>


----------------

### debug

<p>Log a message on the server at level
debug.</p>
<ul>
<li><strong>Type</strong>: statement</li>
</ul>


----------------

### defined

<p>Determine whether a given
type is defined, either as a native type or a defined type, or whether a class is defined.
This is useful for checking whether a class is defined and only including it if it is.
This function can also test whether a resource has been defined, using resource references
(e.g., <code>if defined(File['/tmp/myfile']) { ... }</code>).  This function is unfortunately
dependent on the parse order of the configuration when testing whether a resource is defined.</p>
<ul>
<li><strong>Type</strong>: rvalue</li>
</ul>


----------------

### emerg

<p>Log a message on the server at level
emerg.</p>
<ul>
<li><strong>Type</strong>: statement</li>
</ul>


----------------

### err

<p>Log a message on the server at level
err.</p>
<ul>
<li><strong>Type</strong>: statement</li>
</ul>


----------------

### fail

<p>Fail with a parse error.</p>
<ul>
<li><strong>Type</strong>: statement</li>
</ul>


----------------

### file

<p>Return the contents of a file.  Multiple files
can be passed, and the first file that exists will be read in.</p>
<ul>
<li><strong>Type</strong>: rvalue</li>
</ul>


----------------

### fqdn_rand

<p>Generates random numbers based on the node's fqdn. The first argument
sets the range.  The second argument specifies a number or string to add to the
seed and is optional.</p>
<ul>
<li><strong>Type</strong>: rvalue</li>
</ul>


----------------

### generate

<p>Calls an external command and returns the results of the
command.  Any arguments are passed to the external command as
arguments.  If the generator does not exit with return code of 0,
the generator is considered to have failed and a parse error is
thrown.  Generators can only have file separators, alphanumerics, dashes,
and periods in them.  This function will attempt to protect you from
malicious generator calls (e.g., those with '..' in them), but it can
never be entirely safe.  No subshell is used to execute
generators, so all shell metacharacters are passed directly to
the generator.</p>
<ul>
<li><strong>Type</strong>: rvalue</li>
</ul>


----------------

### include

<p>Evaluate one or more classes.</p>
<ul>
<li><strong>Type</strong>: statement</li>
</ul>


----------------

### info

<p>Log a message on the server at level
info.</p>
<ul>
<li><strong>Type</strong>: statement</li>
</ul>


----------------

### inline_template

<p>Evaluate a template string and return its value.  See <a href="http://docs.puppetlabs.com/guides/templating.html">the templating docs</a> for more information.  Note that
if multiple template strings are specified, their output is all concatenated
and returned as the output of the function.</p>
<ul>
<li><strong>Type</strong>: rvalue</li>
</ul>


----------------

### notice

<p>Log a message on the server at level
notice.</p>
<ul>
<li><strong>Type</strong>: statement</li>
</ul>


----------------

### realize

<p>Make a virtual object real.  This is useful
when you want to know the name of the virtual object and don't want to
bother with a full collection.  It is slightly faster than a collection,
and, of course, is a bit shorter.  You must pass the object using a
reference; e.g.: <code>realize User[luke]</code>.</p>
<ul>
<li><strong>Type</strong>: statement</li>
</ul>


----------------

### regsubst

<p>Perform regexp replacement on a string.</p>
<ul>
<li><strong>Parameters</strong> (in order):</li>
</ul>
<table frame="void" rules="none">
<col />
<col />
<tbody valign="top">
<tr><th>str:</th><td><p>The string to operate on.</p>
</td>
</tr>
<tr><th>regexp:</th><td><p>The regular expression matching the string.  If you want it anchored at the start and or end of the string, you must do that with ^ and $ yourself.</p>
</td>
</tr>
<tr><th>replacement:</th><td><p>Replacement string. Can contain back references to what was matched using 0, 1, and so on.</p>
</td>
</tr>
<tr><th>flags:</th><td><p>Optional. String of single letter flags for how the regexp is interpreted:</p>
<ul>
<li><strong>E</strong>         Extended regexps</li>
<li><strong>I</strong>         Ignore case in regexps</li>
<li><strong>M</strong>         Multiline regexps</li>
<li><strong>G</strong>         Global replacement; all occurrences of the regexp in the string will be replaced.  Without this, only the first occurrence will be replaced.</li>
</ul>
</td>
</tr>
<tr><th>lang:</th><td><p>Optional.  How to handle multibyte characters.  A single-character string with the following values:</p>
<ul>
<li><strong>N</strong>         None</li>
<li><strong>E</strong>         EUC</li>
<li><strong>S</strong>         SJIS</li>
<li><strong>U</strong>         UTF-8</li>
</ul>
</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>Examples</strong></li>
</ul>
<p>Get the third octet from the node's IP address:</p>
<pre><code>
$i3 = regsubst($ipaddress,'^([0-9]+)[.]([0-9]+)[.]([0-9]+)[.]([0-9]+)$','\3')
</code></pre>
<p>Put angle brackets around each octet in the node's IP address:</p>
<pre><code>
$x = regsubst($ipaddress, '([0-9]+)', '&lt;\1&gt;', 'G')
</code></pre>
<ul>
<li><strong>Type</strong>: rvalue</li>
</ul>


----------------

### require

<p>Evaluate one or more classes,  adding the required class as a dependency.</p>
<p>The relationship metaparameters work well for specifying relationships
between individual resources, but they can be clumsy for specifying
relationships between classes.  This function is a superset of the
'include' function, adding a class relationship so that the requiring
class depends on the required class.</p>

<p>Warning</p>
<p>using require in place of include can lead to unwanted dependency cycles.
For instance the following manifest, with 'require' instead of 'include'
would produce a nasty dependence cycle, because notify imposes a before
between File[/foo] and Service[foo]:</p>
<pre><code>
class myservice {
   service { foo: ensure =&gt; running }
}

class otherstuff {
   include myservice
   file { '/foo': notify =&gt; Service[foo] }
}
</code></pre>

<ul>
<li><strong>Type</strong>: statement</li>
</ul>


----------------

### search

<p>Add another namespace for this class to search.
This allows you to create classes with sets of definitions and add
those classes to another class's search path.</p>
<ul>
<li><strong>Type</strong>: statement</li>
</ul>


----------------

### sha1

<p>Returns a SHA1 hash value from a provided string.</p>
<ul>
<li><strong>Type</strong>: rvalue</li>
</ul>


----------------

### shellquote

<p>Quote and concatenate arguments for use in Bourne shell.</p>
<p>Each argument is quoted separately, and then all are concatenated
with spaces.  If an argument is an array, the elements of that
array is interpolated within the rest of the arguments; this makes
it possible to have an array of arguments and pass that array to
shellquote() instead of having to specify specify each argument
individually in the call.</p>
<ul>
<li><strong>Type</strong>: rvalue</li>
</ul>


----------------

### split

<p>Split a string variable into an array using the specified split regexp.</p>
<p>Usage:</p>
<pre><code>
$string     = 'v1.v2:v3.v4'
$array_var1 = split($string, ':')
$array_var2 = split($string, '[.]')
$array_var3 = split($string, '[.:]')
</code></pre>
<p>$array_var1 now holds the result ['v1.v2', 'v3.v4'],
while $array_var2 holds ['v1', 'v2:v3', 'v4'], and
$array_var3 holds ['v1', 'v2', 'v3', 'v4'].</p>
<p>Note that in the second example, we split on a string that contains
a regexp meta-character (.), and that needs protection.  A simple
way to do that for a single character is to enclose it in square
brackets.</p>
<ul>
<li><strong>Type</strong>: rvalue</li>
</ul>


----------------

### sprintf

<p>Perform printf-style formatting of text.</p>
<p>The first parameter is format string describing how the rest of the parameters should be formatted.  See the documentation for the <code>Kernel::sprintf()</code> function in Ruby for all the details.</p>
<ul>
<li><strong>Type</strong>: rvalue</li>
</ul>


----------------

### tag

<p>Add the specified tags to the containing class
or definition.  All contained objects will then acquire that tag, also.</p>
<ul>
<li><strong>Type</strong>: statement</li>
</ul>


----------------

### tagged

<p>A boolean function that
tells you whether the current container is tagged with the specified tags.
The tags are ANDed, so that all of the specified tags must be included for
the function to return true.</p>
<ul>
<li><strong>Type</strong>: rvalue</li>
</ul>


----------------

### template

<p>Evaluate a template and return its value.  See <a href="http://docs.puppetlabs.com/guides/templating.html">the templating docs</a> for more information.  Note that
if multiple templates are specified, their output is all concatenated
and returned as the output of the function.</p>
<ul>
<li><strong>Type</strong>: rvalue</li>
</ul>


----------------

### versioncmp

<p>Compares two versions</p>
<p>Prototype:</p>
<pre><code>
$result = versioncmp(a, b)

where a and b are arbitrary version strings
</code></pre>
<p>This functions returns a number:</p>
<pre><code>
* &gt; 0 if version a is greater than version b
* == 0 if both version are equals
* &lt; 0 if version a is less than version b
</code></pre>
<p>Example:</p>
<pre><code>
if versioncmp('2.6-1', '2.4.5') &gt; 0 {
    notify('2.6-1 is &gt; than 2.4.5')
}
</code></pre>
<ul>
<li><strong>Type</strong>: rvalue</li>
</ul>


----------------

### warning

<p>Log a message on the server at level
warning.</p>
<ul>
<li><strong>Type</strong>: statement</li>
</ul>
<hr />
<p><em>This page autogenerated on Thu Feb 24 17:22:44 -0800 2011</em></p>




